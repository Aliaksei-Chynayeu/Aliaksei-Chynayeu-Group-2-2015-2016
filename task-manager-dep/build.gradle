apply plugin: 'java'
apply plugin: 'eclipse' 
	
allprojects {
	apply plugin: 'java'
	apply plugin: 'base'
	apply plugin: 'jacoco'
	
	build.doLast {
		copy {
			from project.file('src/main/resources/store')
			into project.file('temp/jarsOutputDir/store')
		}
		copy {
			from project.file('build/libs')
			into rootProject.file('./temp/jarsOutputDir')
		}
		copy {
			from configurations.runtime
			into rootProject.file('temp/jarsOutputDir')
		}
		delete  "${projectDir}/build",
				"${projectDir}/resources"
	}
	clean.doFirst {
		delete  "${projectDir}/reports",
				"${projectDir}/temp",
				"${projectDir}/build",
				"${projectDir}/bin"
	}
    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

subprojects {
	
	repositories {
		mavenCentral()
	}

	apply plugin: 'application'

	mainClassName = "com.epam.jmp.taskmanager.run.App"

    sourceCompatibility = 1.6

	dependencies {
    	compile 'com.puppycrawl.tools:checkstyle:6.15' 
    	compile 'org.apache.commons:commons-lang3:3.0'
    	compile 'org.hamcrest:hamcrest-all:1.1'
    	compile 'javax.xml.bind:jaxb-api:2.2.2'
    	compile 'com.sun.xml.bind:jaxb-impl:2.0.1'
    	compile 'log4j:log4j:1.2.17'
    	compile 'org.powermock:powermock-mockito-release-full:1.6.1'
    	compile 'com.mockrunner:mockrunner-jdbc:1.0.4'
    	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.14'
    	compile 'org.glassfish.jersey.media:jersey-media-multipart:2.14'
    	compile 'javax.servlet:javax.servlet-api:3.0.1'
    	compile 'org.hibernate:hibernate-core:5.1.0.Final'
    	compile 'javax:javaee-web-api:7.0'
    	compile 'org.springframework:spring-context:4.2.5.RELEASE'
    	compile 'org.springframework:spring-core:4.2.5.RELEASE'
    	compile 'org.springframework:spring-test:4.2.5.RELEASE'
    	compile 'org.springframework:spring-beans:4.2.5.RELEASE'
    	compile 'org.springframework:spring-orm:4.2.5.RELEASE'
    	compile 'commons-dbcp:commons-dbcp:1.4'
    	compile 'mysql:mysql-connector-java:5.1.6'
    }
	

	sourceSets {
		main {
			resources { 
				srcDirs rootProject.file("./src/main/resources")	
				exclude 'store/**'
			}
		}
	}
	
	build.doLast {
		copy {
			from configurations.runtime
			into rootProject.file('./temp/jarsOutputDir')
		}
	}

	
	test {
		ignoreFailures = true
		reports { 
			junitXml.enabled = false 
			html.enabled = true 
		} 
	}
    
	jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }	
}

task appTestReport(type: TestReport) {
    destinationDir = file("reports/testReport")
    reportOn subprojects*.test
}

//task appJavadocs(type: Javadoc) {
//   source subprojects.collect {project -> project.sourceSets.main.allJava }
//   classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
//   destinationDir = file("reports/javadoc")
//}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
        html.destination "reports/jacoco/jacocoHtml"
    }
}

build.dependsOn appTestReport, /*appJavadocs,*/ jacocoRootReport